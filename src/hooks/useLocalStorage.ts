import { useState, useEffect, useCallback } from 'react';

import { IncomeAllocation } from '../components/IncomeSettings';

// LocalStorage„ÅÆ„Ç≠„Éº
const STORAGE_KEY = 'neurofinance_data';
const BACKUP_KEY = 'neurofinance_backup';
// const VERSION_KEY = 'neurofinance_version'; // Â∞ÜÊù•ÁöÑ„Å´‰ΩøÁî®‰∫àÂÆö
const CURRENT_VERSION = '1.0.0';

// „Éá„Éº„Çø„ÅÆÂûãÂÆöÁæ©
export interface NeuroFinanceData {
  version: string;
  lastUpdated: string;
  settings: {
    userName?: string;
    monthlyIncome?: number;
    incomeAllocation?: IncomeAllocation;
    categories: BudgetCategory[];
  };
  transactions: Transaction[];
  moods: MoodEntry[];
  goals: Goal[];
  level: number;
  xp: number;
  badges: string[];
}

export interface BudgetCategory {
  id: string;
  name: string;
  icon: string;
  budget: number;
  spent: number;
  color: string;
}

export interface Transaction {
  id: string;
  date: string;
  amount: number;
  category: string;
  description: string;
  mood?: string;
  impulsivity?: number; // 1-5
}

export interface MoodEntry {
  date: string;
  mood: 'happy' | 'stable' | 'tired' | 'stressed' | 'anxious';
  note?: string;
}

export interface Goal {
  id: string;
  title: string;
  target: number;
  current: number;
  deadline: string;
}

// „Éá„Éï„Ç©„É´„Éà„Éá„Éº„Çø
const DEFAULT_DATA: NeuroFinanceData = {
  version: CURRENT_VERSION,
  lastUpdated: new Date().toISOString(),
  settings: {
    monthlyIncome: 0,
    incomeAllocation: {
      savings: 20,
      fixedCosts: 40,
      livingCosts: 25,
      freeMoney: 15
    },
    categories: [
      { id: '1', name: 'È£üË≤ª', icon: 'coffee', budget: 50000, spent: 0, color: '#8884d8' },
      { id: '2', name: 'Â®ØÊ•ΩË≤ª', icon: 'gamepad', budget: 30000, spent: 0, color: '#82ca9d' },
      { id: '3', name: '„Çπ„Éà„É¨„ÇπÁô∫Êï£Ë≤ª', icon: 'heart', budget: 20000, spent: 0, color: '#ec4899' },
      { id: '4', name: 'Êó•Áî®ÂìÅ', icon: 'shopping-bag', budget: 15000, spent: 0, color: '#ffc658' },
    ]
  },
  transactions: [],
  moods: [],
  goals: [],
  level: 1,
  xp: 0,
  badges: []
};

/**
 * LocalStorage„Å®„ÅÆÂêåÊúü„ÇíÁÆ°ÁêÜ„Åô„Çã„Ç´„Çπ„Çø„É†„Éï„ÉÉ„ÇØ
 */
export const useLocalStorage = () => {
  const [data, setData] = useState<NeuroFinanceData>(DEFAULT_DATA);
  const [isLoading, setIsLoading] = useState(true);
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);

  // LocalStorage„Åã„Çâ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
  const loadData = useCallback(() => {
    try {
      const stored = localStorage.getItem(STORAGE_KEY);
      if (stored) {
        const parsed = JSON.parse(stored) as NeuroFinanceData;
        
        // „Éê„Éº„Ç∏„Éß„É≥„ÉÅ„Çß„ÉÉ„ÇØ
        if (parsed.version !== CURRENT_VERSION) {
          // „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥Âá¶ÁêÜ„Çí„Åì„Åì„Å´ËøΩÂä†
          // TODO: „Éá„Éº„Çø„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥Âá¶ÁêÜ
        // console.log('„Éá„Éº„Çø„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„ÅåÂøÖË¶Å„Åß„Åô');
        }
        
        setData(parsed);
        setLastSaved(new Date(parsed.lastUpdated));
      }
    } catch (error) {
      console.error('„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
      // „Ç®„É©„ÉºÊôÇ„ÅØËá™Âãï„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Åã„ÇâÂæ©ÂÖÉ„ÇíË©¶„Åø„Çã
      tryRestoreFromBackup();
    } finally {
      setIsLoading(false);
    }
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  // LocalStorage„Å´„Éá„Éº„Çø„Çí‰øùÂ≠ò
  const saveData = useCallback((newData?: NeuroFinanceData) => {
    try {
      const dataToSave = newData || data;
      const updated = {
        ...dataToSave,
        lastUpdated: new Date().toISOString()
      };
      
      // „É°„Ç§„É≥„Éá„Éº„Çø„Çí‰øùÂ≠ò
      localStorage.setItem(STORAGE_KEY, JSON.stringify(updated));
      
      // Ëá™Âãï„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÔºà1Êó•1ÂõûÔºâ
      const lastBackup = localStorage.getItem(BACKUP_KEY + '_date');
      const today = new Date().toDateString();
      if (lastBackup !== today) {
        localStorage.setItem(BACKUP_KEY, JSON.stringify(updated));
        localStorage.setItem(BACKUP_KEY + '_date', today);
      }
      
      setLastSaved(new Date());
      setHasUnsavedChanges(false);
      
      return true;
    } catch (error) {
      console.error('„Éá„Éº„Çø„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
      
      // ÂÆπÈáè„Ç™„Éº„Éê„Éº„ÅÆÂèØËÉΩÊÄß
      if (error instanceof Error && error.name === 'QuotaExceededError') {
        alert('„Éñ„É©„Ç¶„Ç∂„ÅÆ„Çπ„Éà„É¨„Éº„Ç∏ÂÆπÈáè„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇÂè§„ÅÑ„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      }
      
      return false;
    }
  }, [data]); // eslint-disable-line react-hooks/exhaustive-deps

  // Ëá™Âãï„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Åã„Çâ„ÅÆÂæ©ÂÖÉ
  const tryRestoreFromBackup = useCallback(() => {
    try {
      const backup = localStorage.getItem(BACKUP_KEY);
      if (backup) {
        const parsed = JSON.parse(backup) as NeuroFinanceData;
        setData(parsed);
        // „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Åã„ÇâÂæ©ÂÖÉÊàêÂäü
        // console.log('„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Åã„ÇâÂæ©ÂÖÉ„Åó„Åæ„Åó„Åü');
        return true;
      }
    } catch (error) {
      console.error('„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Åã„Çâ„ÅÆÂæ©ÂÖÉ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
    }
    return false;
  }, []);

  // „Éá„Éº„Çø„Çí„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÔºàJSONÂΩ¢Âºè„Åß„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÔºâ
  const exportData = useCallback(() => {
    const dataStr = JSON.stringify(data, null, 2);
    const blob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `neurofinance_backup_${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }, [data]);

  // „Éá„Éº„Çø„Çí„Ç§„É≥„Éù„Éº„Éà
  const importData = useCallback((file: File): Promise<boolean> => {
    return new Promise((resolve) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const imported = JSON.parse(e.target?.result as string) as NeuroFinanceData;
          
          // „Éá„Éº„Çø„ÅÆÊ§úË®º
          if (!imported.version || !imported.settings) {
            throw new Error('ÁÑ°Âäπ„Å™„Éá„Éº„ÇøÂΩ¢Âºè„Åß„Åô');
          }
          
          setData(imported);
          saveData(imported);
          resolve(true);
        } catch (error) {
          console.error('„Ç§„É≥„Éù„Éº„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
          alert('„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÊ≠£„Åó„ÅÑ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
          resolve(false);
        }
      };
      reader.readAsText(file);
    });
  }, [saveData]);

  // „Éá„Éº„Çø„Çí„ÇØ„É™„Ç¢ÔºàÂàùÊúüÂåñÔºâ
  const clearData = useCallback(() => {
    if (confirm('„Åô„Åπ„Å¶„ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì„ÄÇ')) {
      // „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Çí‰ΩúÊàê„Åó„Å¶„Åã„ÇâÂâäÈô§
      exportData();
      localStorage.removeItem(STORAGE_KEY);
      setData(DEFAULT_DATA);
      setLastSaved(null);
      setHasUnsavedChanges(false);
    }
  }, [exportData]);

  // ÂèéÂÖ•Ë®≠ÂÆöÊõ¥Êñ∞
  const updateIncomeSettings = useCallback((income: number, allocation: IncomeAllocation) => {
    const updatedData = {
      ...data,
      settings: {
        ...data.settings,
        monthlyIncome: income,
        incomeAllocation: allocation
      }
    };
    
    setData(updatedData);
    setHasUnsavedChanges(true);
    saveData(updatedData);
  }, [data, saveData]); // eslint-disable-line react-hooks/exhaustive-deps
  
  // „Ç´„ÉÜ„Ç¥„É™Êõ¥Êñ∞
  const updateCategories = useCallback((newCategories: BudgetCategory[]) => {
    const updatedData = {
      ...data,
      settings: {
        ...data.settings,
        categories: newCategories
      }
    };
    
    setData(updatedData);
    setHasUnsavedChanges(true);
    saveData(updatedData);
  }, [data, saveData]); // eslint-disable-line react-hooks/exhaustive-deps
  
  // „Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥ËøΩÂä†
  const addTransaction = useCallback((transaction: Omit<Transaction, 'id'>) => {
    const newTransaction: Transaction = {
      ...transaction,
      id: Date.now().toString()
    };
    
    const updatedData = {
      ...data,
      transactions: [...data.transactions, newTransaction],
      settings: {
        ...data.settings,
        categories: data.settings.categories.map(cat => 
          cat.id === transaction.category 
            ? { ...cat, spent: cat.spent + transaction.amount }
            : cat
        )
      }
    };
    
    setData(updatedData);
    setHasUnsavedChanges(true);
    
    // XPÁç≤ÂæóÔºàË®òÈå≤„Åô„Çã„Åü„Å≥„Å´10XPÔºâ
    addXP(10);
    
    return newTransaction;
  }, [data]); // eslint-disable-line react-hooks/exhaustive-deps

  // XPËøΩÂä†„Å®„É¨„Éô„É´„Ç¢„ÉÉ„ÉóÂá¶ÁêÜ
  const addXP = useCallback((amount: number) => {
    const newXP = data.xp + amount;
    const xpForNextLevel = data.level * 100; // „É¨„Éô„É´√ó100„Åå„É¨„Éô„É´„Ç¢„ÉÉ„Éó„Å´ÂøÖË¶Å„Å™XP
    
    if (newXP >= xpForNextLevel) {
      // „É¨„Éô„É´„Ç¢„ÉÉ„ÉóÔºÅ
      const newLevel = data.level + 1;
      const remainingXP = newXP - xpForNextLevel;
      
      setData(prev => ({
        ...prev,
        level: newLevel,
        xp: remainingXP
      }));
      
      // „É¨„Éô„É´„Ç¢„ÉÉ„ÉóÈÄöÁü•ÔºàÂÆüË£Ö„ÅØÂæå„ÅßÔºâ
      // TODO: „Éà„Éº„Çπ„ÉàÈÄöÁü•„Å™„Å©„ÅÆUI„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíÂÆüË£Ö
      // console.log(`üéâ „É¨„Éô„É´${newLevel}„Å´„Ç¢„ÉÉ„ÉóÔºÅ`);
    } else {
      setData(prev => ({
        ...prev,
        xp: newXP
      }));
    }
  }, [data]);

  // ÂàùÂõû„Éû„Ç¶„É≥„ÉàÊôÇ„Å´„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
  useEffect(() => {
    loadData();
  }, [loadData]);

  // ÂÆöÊúüÁöÑ„Å™Ëá™Âãï‰øùÂ≠òÔºà30Áßí„Åî„Å®Ôºâ
  useEffect(() => {
    if (hasUnsavedChanges && !isLoading) {
      const timer = setTimeout(() => {
        saveData();
      }, 30000);
      
      return () => clearTimeout(timer);
    }
  }, [hasUnsavedChanges, isLoading, saveData]);

  // „Éö„Éº„Ç∏„ÇíÈõ¢„Çå„ÇãÂâç„Å´‰øùÂ≠ò
  useEffect(() => {
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      if (hasUnsavedChanges) {
        saveData();
        e.preventDefault();
        e.returnValue = '‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ§âÊõ¥„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ';
      }
    };
    
    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => window.removeEventListener('beforeunload', handleBeforeUnload);
  }, [hasUnsavedChanges, saveData]);

  return {
    data,
    isLoading,
    lastSaved,
    hasUnsavedChanges,
    
    // „Éá„Éº„ÇøÊìç‰Ωú
    saveData,
    loadData,
    clearData,
    exportData,
    importData,
    
    // „Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥
    addTransaction,
    
    // „Ç´„ÉÜ„Ç¥„É™ÁÆ°ÁêÜ
    updateCategories,
    
    // ÂèéÂÖ•Ë®≠ÂÆö
    updateIncomeSettings,
    
    // „Ç≤„Éº„Éü„Éï„Ç£„Ç±„Éº„Ç∑„Éß„É≥
    addXP,
    
    // Áõ¥Êé•„Éá„Éº„ÇøÊõ¥Êñ∞ÔºàÊÖéÈáç„Å´‰ΩøÁî®Ôºâ
    updateData: setData
  };
};
